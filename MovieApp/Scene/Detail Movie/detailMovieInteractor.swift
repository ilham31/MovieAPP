//
//  detailMovieInteractor.swift
//  MovieApp
//
//  Created by Ilham on 21/02/20.
//  Copyright (c) 2020 ilham. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire
import ObjectMapper

protocol detailMovieBusinessLogic {
    func getReviewMovie(idMovie: Int)
    func saveMovieToLocalStorage(movieData: listMovieTableViewCell.ViewModel)
    func removeMovieFromLocalStorage(movieData: listMovieTableViewCell.ViewModel)
}

class detailMovieInteractor {
    var presenter: detailMoviePresentationLogic?
    
    private func checkSameMovie(localMovie: [listMovieTableViewCell.ViewModel], idMovieData: Int) -> Bool {
        let movieData = localMovie.filter({$0.idMovie == idMovieData})
        if !movieData.isEmpty  {
            return true
        } else {
            return false
        }
    }
    
    private func saveMovieToLocal(movieData: [listMovieTableViewCell.ViewModel]) {
        UserDefaults.standard.set(try? PropertyListEncoder().encode(movieData), forKey: MovieAppConstants.MovieUserDefault.movie)
        presenter?.presentSuccess(message: MovieAppConstants.Message.Success.savedMovie)
    }
}

extension detailMovieInteractor: detailMovieBusinessLogic {
    func getReviewMovie(idMovie: Int) {
        Alamofire.request(MovieAppConstants.URL.detailMovieAdderss + idMovie.description + MovieAppConstants.URL.reviewParam + MovieAppConstants.URL.APIParamWithPage + MovieAppConstants.URL.firstPage).responseJSON { response in
            if(response.response?.statusCode == 200){
                if let json = response.result.value as AnyObject? {
                    let arrayResponse = json["results"] as! NSArray
                    let arrayObject = Mapper<MovieReviewModel>().mapArray(JSONArray: arrayResponse as! [[String : Any]]);
                    self.presenter?.presentMovieReview(movieReview: arrayObject)
                }
            } else {
                print(response.error!)
            }
        }
    }
    
    func saveMovieToLocalStorage(movieData: listMovieTableViewCell.ViewModel) {
        if let data = UserDefaults.standard.value(forKey: MovieAppConstants.MovieUserDefault.movie) as? Data {
            var localMovie = try? PropertyListDecoder().decode(Array<listMovieTableViewCell.ViewModel>.self, from: data)
            if checkSameMovie(localMovie: localMovie!, idMovieData: movieData.idMovie) {
                presenter?.presentDuplicateMovie()
            } else {
                localMovie?.append(movieData)
                saveMovieToLocal(movieData: localMovie!)
            }
        } else {
            saveMovieToLocal(movieData: [movieData])
        }
    }
    
    func removeMovieFromLocalStorage(movieData: listMovieTableViewCell.ViewModel) {
        let data = UserDefaults.standard.value(forKey: MovieAppConstants.MovieUserDefault.movie) as? Data
        let localMovie = try? PropertyListDecoder().decode(Array<listMovieTableViewCell.ViewModel>.self, from: data!)
        let movieAfterRemove = localMovie?.filter({$0.idMovie != movieData.idMovie})
        UserDefaults.standard.set(try? PropertyListEncoder().encode(movieAfterRemove), forKey: MovieAppConstants.MovieUserDefault.movie)
        presenter?.presentSuccess(message: MovieAppConstants.Message.Success.removeMovie)
    }
}
