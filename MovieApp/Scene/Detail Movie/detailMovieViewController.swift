//
//  detailMovieViewController.swift
//  MovieApp
//
//  Created by Ilham on 21/02/20.
//  Copyright (c) 2020 ilham. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftMessages

protocol detailMovieDisplayLogic: class {
    func displayReviewMovie(movieReview: [listMovieReviewTableViewCell.ViewModel])
    func displaySuccess(message: String)
    func displayError(message: String)
    func displayDuplicateMovie()
}

class detailMovieViewController: UIViewController {
    var interactor: detailMovieBusinessLogic?
    var router: detailMovieRoutingLogic?
    var movieData: listMovieTableViewCell.ViewModel!
    
    private var movieReviewData = [listMovieReviewTableViewCell.ViewModel]()
    
    @IBOutlet weak var tableView: UITableView!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = detailMovieInteractor()
        let presenter = detailMoviePresenter()
        let router = detailMovieRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
    }
    
    static func instantiate() -> detailMovieViewController {
        let vc = UIStoryboard(name: MovieAppConstants.Storyboard.detailMovie, bundle: nil).instantiateInitialViewController() as! detailMovieViewController
        return vc
    }
    
    // MARK: View lifecycle
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        interactor?.getReviewMovie(idMovie: movieData!.idMovie)
    }
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupNavigationBar()
        setupTableView()
    }
    
    private func setupNavigationBar() {
        navigationItem.title = movieData?.movieTitle
        navigationController?.navigationBar.barTintColor = UIColor.white
        navigationItem.rightBarButtonItem = UIBarButtonItem(image: MovieAppConstants.Image.favouriteImage, style: .plain, target: self, action: #selector(favouriteButtonPressed))
    }
    
    private func setupTableView() {
        tableView.rowHeight = UITableView.automaticDimension
        tableView.estimatedRowHeight = 200
        tableView.dataSource = self
        tableView.register(UINib(nibName: MovieAppConstants.TableViewCellNib.listMovie, bundle: nil), forCellReuseIdentifier: MovieAppConstants.TableViewCellNib.listMovie)
        tableView.register(UINib(nibName: MovieAppConstants.TableViewCellNib.listMovieReview, bundle: nil), forCellReuseIdentifier: MovieAppConstants.TableViewCellNib.listMovieReview)
        tableView.tableFooterView = UIView()
    }
    
    private func setupDetailTableViewCell() -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: MovieAppConstants.TableViewCellNib.listMovie) as! listMovieTableViewCell
        cell.setupDetailCell(movieData)
        cell.selectionStyle = .none
        return cell
    }
    
    private func setupDetailMovieReviewCell(_ row: Int) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: MovieAppConstants.TableViewCellNib.listMovieReview) as! listMovieReviewTableViewCell
        cell.updateCell(movieReviewData[row])
        cell.selectionStyle = .none
        return cell
    }
    
    @objc func favouriteButtonPressed() {
        interactor?.saveMovieToLocalStorage(movieData: movieData)
    }
}

extension detailMovieViewController: detailMovieDisplayLogic {
    func displayReviewMovie(movieReview: [listMovieReviewTableViewCell.ViewModel]) {
        movieReviewData = movieReview
        tableView.reloadData()
    }
    
    func displaySuccess(message: String) {
        let messageAlert = MessageView.viewFromNib(layout: .messageView)
        messageAlert.configureTheme(.success)
        messageAlert.configureContent(title: MovieAppConstants.Message.Success.title, body: message)
        messageAlert.button?.isHidden = true
        
        SwiftMessages.show(view: messageAlert)
    }
    
    func displayError(message: String) {
        let messageAlert = MessageView.viewFromNib(layout: .messageView)
        messageAlert.configureTheme(.error)
        messageAlert.configureContent(title: MovieAppConstants.Message.Error.title, body: message)
        messageAlert.button?.isHidden = true
        
        SwiftMessages.show(view: messageAlert)
    }
    
    func displayDuplicateMovie() {
        let refreshAlert = UIAlertController(title: "Remove Saved Movie", message: MovieAppConstants.Message.Error.duplicateMovie, preferredStyle: UIAlertController.Style.alert)
        
        refreshAlert.addAction(UIAlertAction(title: "Ok", style: .default, handler: { (action: UIAlertAction!) in
            self.removeMovieFromFavourite()
        }))
        
        refreshAlert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: nil))
        
        present(refreshAlert, animated: true, completion: nil)
    }
    
    private func removeMovieFromFavourite() {
        interactor?.removeMovieFromLocalStorage(movieData: movieData)
    }
}

extension detailMovieViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        movieReviewData.count + 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return indexPath.row == 0 ? setupDetailTableViewCell(): setupDetailMovieReviewCell(indexPath.row - 1)
    }
}
