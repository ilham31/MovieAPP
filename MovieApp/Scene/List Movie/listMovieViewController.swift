//
//  listMovieViewController.swift
//  MovieApp
//
//  Created by Ilham on 21/02/20.
//  Copyright (c) 2020 ilham. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol listMovieDisplayLogic: class {
    func displayMovie(movie: [listMovieTableViewCell.ViewModel])
    func displayMoreMovie(movie: [listMovieTableViewCell.ViewModel])
}

class listMovieViewController: UIViewController{
    var interactor: listMovieBusinessLogic?
    var router: listMovieRoutingLogic?
    private var movies = [listMovieTableViewCell.ViewModel]()
    
    @IBOutlet weak var listMovieTableView: UITableView!

    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = listMovieInteractor()
        let presenter = listMoviePresenter()
        let router = listMovieRouter()
        
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupNavigationBar()
        setupTableView()
        interactor?.requestMovieData(withFilter: .Popular)
    }
    
    private func setupNavigationBar() {
        navigationItem.title = "Movie App"
        navigationController?.navigationBar.barTintColor = UIColor.white
        navigationItem.rightBarButtonItem = UIBarButtonItem(image: MovieAppConstants.Image.favouriteImage, style: .plain, target: self, action: #selector(favouriteButtonPressed))
    }
    
    private func setupTableView() {
        listMovieTableView.rowHeight = UITableView.automaticDimension
        listMovieTableView.estimatedRowHeight = 200
        listMovieTableView.delegate = self
        listMovieTableView.dataSource = self
        listMovieTableView.register(UINib(nibName: MovieAppConstants.TableViewCellNib.listMovie, bundle: nil), forCellReuseIdentifier: MovieAppConstants.TableViewCellNib.listMovie)
        listMovieTableView.tableFooterView = UIView()
    }
    
    @IBAction func filterButtonPressed(_ sender: Any) {
        
        let alert = UIAlertController(title: "", message: "Choose Movie Type", preferredStyle: .actionSheet)

        alert.addAction(UIAlertAction(title: "Popular", style: .default , handler:{ (UIAlertAction)in
            self.movieTypePressed(withFilter: .Popular)
        }))

        alert.addAction(UIAlertAction(title: "Top Rated", style: .default , handler:{ (UIAlertAction)in
            self.movieTypePressed(withFilter: .TopRated)
        }))

        alert.addAction(UIAlertAction(title: "Now Playing", style: .default , handler:{ (UIAlertAction)in
            self.movieTypePressed(withFilter: .NowPlaying)
        }))

        alert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: nil))
        
        alert.popoverPresentationController?.sourceView = self.view
        alert.popoverPresentationController?.permittedArrowDirections = UIPopoverArrowDirection()
        alert.popoverPresentationController?.sourceRect = CGRect(x: self.view.bounds.midX, y: self.view.bounds.midY, width: 0, height: 0)
        
        self.present(alert, animated: true, completion: nil)
    }
    
    private func movieTypePressed(withFilter filter: MovieAppConstants.FilterType) {
        movies = []
        listMovieTableView.reloadData()
        interactor?.requestMovieData(withFilter: filter)
    }
    
    @objc func favouriteButtonPressed() {
        router?.routeToFavouritePage()
    }
}

extension listMovieViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.routeToDetailMovie(movieData: movies[indexPath.row])
    }
}

extension listMovieViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        movies.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if indexPath.row == movies.count - 1 {
            interactor?.loadMoreData()
        }
        let cell = listMovieTableView.dequeueReusableCell(withIdentifier: MovieAppConstants.TableViewCellNib.listMovie) as! listMovieTableViewCell
        cell.updateCell(movies[indexPath.row])
        cell.selectionStyle = .none
        return cell
    }
}

extension listMovieViewController: listMovieDisplayLogic {
    func displayMovie(movie: [listMovieTableViewCell.ViewModel]) {
         movies = movie
         listMovieTableView.reloadData()
    }
    
    func displayMoreMovie(movie: [listMovieTableViewCell.ViewModel]) {
        movies += movie
        listMovieTableView.reloadData()
    }
}
