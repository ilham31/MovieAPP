//
//  listMovieInteractor.swift
//  MovieApp
//
//  Created by Ilham on 21/02/20.
//  Copyright (c) 2020 ilham. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire
import ObjectMapper

protocol listMovieBusinessLogic {
    func requestMovieData(withFilter: MovieAppConstants.FilterType)
    func loadMoreData()
}

class listMovieInteractor: listMovieBusinessLogic {
    var presenter: listMoviePresentationLogic?
    var FilterType: MovieAppConstants.FilterType?
    var URL: String?
    var page: Int = 1
    
    func requestMovieData(withFilter: MovieAppConstants.FilterType) {
        FilterType = withFilter
        switch FilterType {
        case .NowPlaying:
            URL = MovieAppConstants.URL.nowPlayingAddress
        case .Popular:
            URL = MovieAppConstants.URL.popularAddress
        case .TopRated:
            URL = MovieAppConstants.URL.topRatedAddress
        default:
            break
        }
    
        Alamofire.request(URL!+MovieAppConstants.URL.APIParamWithPage+MovieAppConstants.URL.firstPage).responseJSON { response in
            if(response.response?.statusCode == 200){
                if let json = response.result.value as AnyObject? {
                    let arrayResponse = json["results"] as! NSArray
                    let arrayObject = Mapper<MovieModels>().mapArray(JSONArray: arrayResponse as! [[String : Any]]);
                    self.presenter?.presentMovie(movieArray: arrayObject)
                }
            } else {
                print(response.error!)
            }
        }
    }
    
    
    
    func loadMoreData() {
        page+=1
        Alamofire.request(URL!+MovieAppConstants.URL.APIParamWithPage+page.description).responseJSON { response in
            if(response.response?.statusCode == 200){
                if let json = response.result.value as AnyObject? {
                    let arrayResponse = json["results"] as! NSArray
                    let arrayObject = Mapper<MovieModels>().mapArray(JSONArray: arrayResponse as! [[String : Any]]);
                    self.presenter?.presentMoreMovie(movieArray: arrayObject)
                }
            } else {
                print(response.error!)
            }
        }
    }
}
